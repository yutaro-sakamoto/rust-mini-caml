use crate::ast::Exp;
use crate::id::gen_tmp;
use crate::typedef::Type;
use std::vec;
grammar;

pub Exp: Box<Exp> = {
    "let" <var:IDENT> "=" <e1:Exp> "in" <e2:Exp>
        => Box::new(Exp::Let((var, Type::Var(None)), e1, e2)),
    SemicolonExp
};

SemicolonExp: Box<Exp> = {
    <l:SemicolonExp> ";" <r:IfExp>
        => Box::new(Exp::Let((gen_tmp(Type::Unit), Type::Unit), l, r)),
    IfExp
}

IfExp: Box<Exp> = {
    "if" <TupleExp> "then" <TupleExp> "else" <TupleExp> => Box::new(Exp::If(<>)),
    TupleExp
}

TupleExp: Box<Exp> = {
    <Elems> => Box::new(Exp::Tuple(<>)),
    SimpleExp
};


Elems: Vec<Box<Exp>> = {
    <SimpleExp> "," <SimpleExp> => vec![<>],
    <mut v:Elems> "," <e:SimpleExp> => {v.push(e); v},
}

IDENT: String = {
    r"[a-zA-Z_][0-9a-zA-Z_]*" => <>.to_string()
}

SimpleExp: Box<Exp> = {
    "(" <Exp> ")" => <>,
    "(" ")" => Box::new(Exp::Unit),
    "true" => Box::new(Exp::Bool(true)),
    "false" => Box::new(Exp::Bool(false)),
    r"[0-9]+" => Box::new(Exp::Int(<>.parse().unwrap())),
    r"[0-9]+\.[0-9]*" => Box::new(Exp::Float(<>.parse().unwrap())),
    IDENT => Box::new(Exp::Var(<>)),
    <SimpleExp> "." "(" <Exp> ")" => Box::new(Exp::Get(<>)),
}